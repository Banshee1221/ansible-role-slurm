{% for host in ansible_play_hosts %}
{% if hostvars[host].headnode is defined | default(false) %}
{% if slurm_version is version('18.00.00', '>')  %}
SlurmctldHost={{ hostvars[host].ansible_hostname }}
#SlurmctldHost={{ hostvars[host].ansible_fqdn }}
{% else %}
ControlMachine={{ hostvars[host].ansible_hostname }}
#ControlMachine={{ hostvars[host].ansible_fqdn }}
{% endif %}
{% else %}
{% endif %}
{% endfor %}
#ControlAddr=
#BackupController=
#BackupAddr=
AuthType=auth/munge
#CheckpointType=checkpoint/none
CryptoType=crypto/munge
#DisableRootJobs=NO
#EnforcePartLimits=NO
#Epilog=
#EpilogSlurmctld=
#FirstJobId=1
#MaxJobId=999999
#GresTypes=
#GroupUpdateForce=0
#GroupUpdateTime=600
#JobCheckpointDir=/var/slurm/checkpoint
#JobCredentialPrivateKey=
#JobCredentialPublicCertificate=
#JobFileAppend=0
#JobRequeue=1
#JobSubmitPlugins=1
#KillOnBadExit=0
#LaunchType=launch/slurm
#Licenses=foo*4,bar
#MailProg=/bin/mail
#MaxJobCount=5000
#MaxStepCount=40000
#MaxTasksPerNode=128
MpiDefault=none
#MpiParams=ports=#-#
#PluginDir=
#PlugStackConfig=
#PrivateData=jobs
ProctrackType=proctrack/cgroup
#Prolog=
#PrologFlags=
#PrologSlurmctld=
#PropagatePrioProcess=0
#PropagateResourceLimits=
#PropagateResourceLimitsExcept=
RebootProgram="/sbin/reboot"
ReturnToService=1
#SallocDefaultCommand=
SlurmctldPidFile=/var/run/slurmctld.pid
SlurmctldPort=6817
SlurmdPidFile=/var/run/slurmd.pid
SlurmdPort=6818
SlurmdSpoolDir=/var/spool/slurm
SlurmUser=slurm
#SlurmdUser=root
#SrunEpilog=
#SrunProlog=
SrunPortRange=60001-63000
StateSaveLocation=/var/spool/slurm
SwitchType=switch/none
#TaskEpilog=
TaskPlugin=task/cgroup
#TaskPluginParam=
#TaskProlog=
#TopologyPlugin=topology/tree
#TmpFS=/tmp
#TrackWCKey=no
#TreeWidth=
#UnkillableStepProgram=
#UsePAM=0
#
#
# TIMERS
#BatchStartTimeout=10
#CompleteWait=0
#EpilogMsgTime=2000
#GetEnvTimeout=2
#HealthCheckInterval=0
#HealthCheckProgram=
InactiveLimit=0
KillWait=30
#MessageTimeout=10
#ResvOverRun=0
MinJobAge=300
#OverTimeLimit=0
SlurmctldTimeout=120
SlurmdTimeout=300
#UnkillableStepTimeout=60
#VSizeFactor=0
Waittime=0
#
#
# SCHEDULING
#DefMemPerCPU=0
FastSchedule=1
#MaxMemPerCPU=0
#SchedulerTimeSlice=30
SchedulerType=sched/backfill
SelectType=select/cons_res
SelectTypeParameters=CR_Core_Memory
#
#
# JOB PRIORITY
#PriorityFlags=
#PriorityType=priority/basic
#PriorityDecayHalfLife=
#PriorityCalcPeriod=
#PriorityFavorSmall=
#PriorityMaxAge=
#PriorityUsageResetPeriod=
#PriorityWeightAge=
#PriorityWeightFairshare=
#PriorityWeightJobSize=
#PriorityWeightPartition=
#PriorityWeightQOS=
#
#
# LOGGING AND ACCOUNTING
#AccountingStorageEnforce=0
{% for host in ansible_play_hosts %}
{% if hostvars[host].headnode is defined | default(false) %}
{% if slurm_use_db %}
AccountingStorageHost={{ hostvars[host].ansible_hostname }}
{% else %}
#AccountingStorageHost=
{% endif %}
{% else %}
{% endif %}
{% endfor %}
#AccountingStorageLoc=
#AccountingStoragePass=
#AccountingStoragePort=
{% if slurm_use_db %}
AccountingStorageType=accounting_storage/slurmdbd
{% else %}
#AccountingStorageType=
{% endif %}
#AccountingStorageUser=
AccountingStoreJobComment=YES
ClusterName={{ slurm_cluster_name }}
#DebugFlags=
#JobCompHost=
#JobCompLoc=
#JobCompPass=
#JobCompPort=
JobCompType=jobcomp/slurmdbd
#JobCompUser=
#JobContainerType=job_container/none
JobAcctGatherFrequency=30
JobAcctGatherType=jobacct_gather/linux
SlurmctldDebug=3
#SlurmctldLogFile=
SlurmdDebug=3
#SlurmdLogFile=
#SlurmSchedLogFile=
#SlurmSchedLogLevel=
#
#
# POWER SAVE SUPPORT FOR IDLE NODES (optional)
#SuspendProgram=
#ResumeProgram=
#SuspendTimeout=
#ResumeTimeout=
#ResumeRate=
#SuspendExcNodes=
#SuspendExcParts=
#SuspendRate=
#SuspendTime=
#

# PARTITIONS
{% set temp_dict=dict() %}
{% for partition in end_list %}
{% set _dummy = temp_dict.update({partition: []}) %}
{% for host in hpc %}
{% if partition in hostvars[host].partitions %}
{% if hostvars[host].headnode is defined %}
{% elif hostvars[host].ansible_hostname is defined | default(false) }
{% set _dummy = temp_dict[partition].append(host.split(".")[0]) %}
{% else %}
{% endif %}
{% else %}
{% endif %}
{% endfor %}
{% endfor %}
{% for key in temp_dict %}
PartitionName={{ key|safe }} Nodes={{ temp_dict[key]|join(',') }} Default={{ 'YES' if key.lower()=='main' else 'NO' }} DefaultTime=3-00:00:00 MaxTime=14-00:00:00 MaxMemPerNode=257931 DefMemPerCPU=4096 State=UP
{% endfor %}
# COMPUTE NODES
{% for host1 in ansible_play_hosts %}
{% if hostvars[host1].headnode is defined | default(false) %}
{% elif hostvars[host1].ansible_hostname is defined | default(false) %}
NodeName={{ hostvars[host1].ansible_hostname  | default("oops!") }} NodeAddr={{ hostvars[host1].ansible_fqdn| default("oops!") }} Boards=1 CPUs={{ hostvars[host1].ansible_processor_vcpus }} SocketsPerBoard={{ hostvars[host1].ansible_processor_count| default("oops!") }} CoresPerSocket={{ hostvars[host1].ansible_processor_cores| default("oops!") }} ThreadsPerCore={{ hostvars[host1].ansible_processor_threads_per_core| default("oops!") }} RealMemory={{ hostvars[host1].ansible_memtotal_mb| default("oops!") }} State=UNKNOWN
{% else %}
{% endif %}
{% endfor %}